generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id        Int       @id @default(autoincrement())
  taskName  String
  startTime DateTime
  duration  Int       @default(30)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  userId    String?
  User      User?     @relation(fields: [userId], references: [uuid])
}

model User {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Task      Task[]
}

model District {
  id           Int       @id @default(autoincrement())
  districtName String    @unique
  stateId      Int
  State        State     @relation(fields: [stateId], references: [id])
  Partner      Partner[]
}

model Office {
  id                Int       @id @default(autoincrement())
  officeName        String    @unique
  officeDescription String?
  Partner           Partner[]
}

model Template {
  id           Int    @id @default(autoincrement())
  templateName String @unique
}

model Partner {
  id                  Int                   @id @default(autoincrement())
  partnerName         String?
  partnerDescription  String?
  officeId            Int
  districtId          Int
  District            District              @relation(fields: [districtId], references: [id])
  Office              Office                @relation(fields: [officeId], references: [id])
  AppointmentSettings AppointmentSettings[]
  PartnerAppointment  PartnerAppointment[]
  PartnerOpening      PartnerOpening[]
}

model State {
  id        Int        @id @default(autoincrement())
  stateName String     @unique
  District  District[]
}

//TODO Kevin Bläser: Zeitslots befüllen
model PartnerAppointment {
  id               Int                @id @default(autoincrement())
  partnerId        Int
  Partner          Partner            @relation(fields: [partnerId], references: [id])
  AppointmentSlots AppointmentSlots[]
}

model PartnerOpening {
  id        Int       @id @default(autoincrement())
  partnerId Int
  Partner   Partner   @relation(fields: [partnerId], references: [id])
  Opening   Opening[]
}

model AppointmentSettings {
  id        Int     @id @default(autoincrement())
  partnerId Int
  Partner   Partner @relation(fields: [partnerId], references: [id])
  intervall Int     @default(30)
}

model AppointmentSlots {
  id                 Int                @id @default(autoincrement())
  paId               Int
  PartnerAppointment PartnerAppointment @relation(fields: [paId], references: [id])
  isBlackList        Boolean            @default(true)
  dateFrom           DateTime           @db.Timestamptz()
  dateTo             DateTime           @db.Timestamptz()
}

model Opening {
  id             Int            @id @default(autoincrement())
  poId           Int
  PartnerOpening PartnerOpening @relation(fields: [poId], references: [id])
  weekday        Weekday
  timeslotFrom   DateTime       @db.Timetz()
  timeslotTo     DateTime       @db.Timetz()
}

enum Weekday {
  Montag
  Dienstag
  Mittwoch
  Donnertag
  Freitag
  Samstag
  Sonntag
}

//Terminslots Boolean (Blackliste | Whiteliste --> Default), Datum, von (default 00:00), bis (default 23:59) , (Wiederholung)
//TerminslotSettings  Intervall [default 30]
//Öffnugnszeiten Array:; Wochentag [Mo, Di, Mi, Do, Fr, Sa, So]; Zeitfenster
